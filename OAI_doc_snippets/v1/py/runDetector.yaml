lang: Python
label: Python (requests, py3)
source: |
  # Up to user: errors management 
  import os
  import time
  import requests   # https://pypi.org/project/requests/
  api_key = "123456789"  # Get it on the Picterra platform
  server_url = "https://app.picterra.ch/public/api/v1"
  detector_id = 'cd4e4567-c66b-16r2-ba16-126655440088' # A trained custom detector
  raster_id = '123e4567-e89b-12d3-a456-426655440000'   # A raster uploaded and committed
  headers =  { 'X-Api-Key': api_key }
  url = "%s/detectors/%s/run/" % (server_url, detector_id)
  data = {'raster_id': raster_id}
  r = requests.post(url, headers=headers, data=data)  # Start detection
  assert r.status_code == 201, "Error starting detection"
  # Here this method ends, follows detection's outcome check
  response = r.json() 
  result_id = response["result_id"]
  poll_interval = response["poll_interval"]
  url = "%s/results/%s/" % (server_url, result_id)
  timeout = time.time() +(10 * 60)  # 10 minutes timeout for polling
  download_url = None
  while True:  # Check detection status
      time.sleep(poll_interval)
      r = requests.get(url, headers=headers)
      assert r.status_code == 200, "Error detailing detection result"
      if r.json()["ready"]:
          download_url = r.json()["result_url"]
          break
      if time.time() > timeout:
        break
  assert download_url is not None, "Prediction exceeded timeout"
  print("Download detection results at %s" % download_url)